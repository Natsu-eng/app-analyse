import streamlit as st
import os
import pandas as pd
from reports.pdf_generator import generate_report_pdf
from io import BytesIO

def show_export():
    """Affiche la section d'exportation des mod√®les et rapports"""
    st.header("üíæ Export & Rapport")
    st.markdown("T√©l√©chargez les mod√®les entra√Æn√©s et un rapport d'exp√©rimentation complet.")
    
    results = st.session_state.get('results')
    if not results:
        st.warning("Aucun r√©sultat √† exporter. Veuillez d'abord lancer une exp√©rimentation.")
        return

    col1, col2 = st.columns(2)

    # --- Export des Mod√®les ---
    with col1:
        with st.container(border=True):
            st.subheader("üì¶ Exporter les Mod√®les")
            st.info("T√©l√©chargez les mod√®les au format .joblib pour les r√©utiliser.")
            for result in results:
                model_path = result.get('model_path')
                model_name = result.get('model_name', 'mod√®le inconnu')
                try:
                    if model_path and os.path.exists(model_path):
                        with open(model_path, "rb") as f:
                            st.download_button(
                                label=f"T√©l√©charger {model_name}",
                                data=f,
                                file_name=os.path.basename(model_path),
                                mime="application/octet-stream",
                                use_container_width=True,
                                key=f"download_{model_name}" # Cl√© unique
                            )
                    else:
                        st.warning(f"Le fichier du mod√®le {model_name} est introuvable.")
                except IOError as e:
                    st.error(f"Erreur de lecture pour {model_name}: {e}")
    
    # --- G√©n√©ration du Rapport PDF ---
    with col2:
        with st.container(border=True):
            st.subheader("üìÑ G√©n√©rer le Rapport PDF")
            st.info("Obtenez un rapport PDF complet de l'analyse et des performances des mod√®les.")
            
            target_column = st.session_state.get('target_column_for_ml_config')
            if not target_column:
                st.error("La colonne cible n'est pas d√©finie. Impossible de g√©n√©rer le rapport.")
                return

            if st.button("G√©n√©rer le Rapport", type="primary", use_container_width=True):
                with st.spinner("G√©n√©ration du rapport PDF..."):
                    try:
                        pdf_bytes = generate_report_pdf(
                            results,
                            st.session_state.get('task_type', 'Inconnu'),
                            st.session_state.get('df', pd.DataFrame()).shape,
                            target_column
                        )
                        
                        # Le bouton de t√©l√©chargement doit √™tre hors de la condition du premier bouton
                        st.session_state.pdf_report_bytes = pdf_bytes
                        st.session_state.report_ready = True
                        st.success("Rapport PDF g√©n√©r√© avec succ√®s ! Cliquez ci-dessous pour t√©l√©charger.")

                    except Exception as e:
                        st.error(f"Erreur lors de la g√©n√©ration du rapport : {str(e)}")
                        st.session_state.report_ready = False

            # Afficher le bouton de t√©l√©chargement si le rapport est pr√™t
            if st.session_state.get('report_ready'):
                st.download_button(
                    label="üì• T√©l√©charger le Rapport PDF",
                    data=st.session_state.pdf_report_bytes,
                    file_name="rapport_datalab.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )